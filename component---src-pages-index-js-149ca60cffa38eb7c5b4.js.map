{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/layout.js"],"names":["IndexPage","searchQuery","useContext","searchQueryContext","state","map","q","Object","assign","_useState","useState","setState","_useState2","gt","setGa","octokit","useEffect","fetch","getGithubClient","Octokit","auth","_ref","_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_8___default","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee2","e","newState","wrap","_context2","prev","next","preventDefault","abrupt","Promise","all","_ref2","_callee","data","res","_context","search","issuesAndPullRequests","query","sent","result","items","stop","_x2","apply","this","arguments","_x","react__WEBPACK_IMPORTED_MODULE_12___default","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_15__","onSubmit","type","name","value","onChange","currentTarget","key","id","onClick","clipboard","task","repo","repository_url","split","pop","number","title","url","toMarkdown","join","onClickClipboard","hasOwnProperty","length","href","labels","label","style","color","backgroundColor","toHtml","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Layout","children"],"mappings":"yQAsFeA,UAzDG,WAAM,IAEhBC,EADkCC,qBAAWC,KAA3CC,MACiCC,IAAI,SAAAC,GAAC,OAAAC,OAAAC,OAAA,GAAUF,KAFlCG,EAGIC,mBAAST,GAA5BG,EAHeK,EAAA,GAGRE,EAHQF,EAAA,GAAAG,EAIFF,mBAAS,IAAtBG,EAJeD,EAAA,GAIXE,EAJWF,EAAA,GAKlBG,EAAU,KAEdC,oBAAU,WACRC,KACC,IAEH,IAIMC,EAAkB,SAACL,GACvB,OAAIE,IACJA,EAAU,IAAII,IAAQ,CAAEC,KAAMP,MAI1BI,GAAKI,EAAAC,IAAAC,EAAAC,EAAAC,KAAG,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACRL,GAAGA,EAAEM,iBACJpB,EAFO,CAAAiB,EAAAE,KAAA,eAAAF,EAAAI,OAAA,wBAAAJ,EAAAE,KAAA,EAGWG,QAAQC,IAAIhC,EAAMC,IAAN,eAAAgC,EAAAf,IAAAC,EAAAC,EAAAC,KAAU,SAAAa,EAAMC,GAAN,IAAAC,EAAA,OAAAjB,EAAAC,EAAAK,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,cAAAS,EAAAT,KAAA,EACzBd,EAAgBL,GAAI6B,OAAOC,sBAAsB,CAACrC,EAAGiC,EAAKK,QADjC,cACrCJ,EADqCC,EAAAI,KAAAJ,EAAAP,OAAA,SAAA3B,OAAAC,OAAA,GAE/B+B,EAF+B,CAEzBO,OAAQN,EAAID,KAAKQ,SAFQ,wBAAAN,EAAAO,SAAAV,MAAV,gBAAAW,GAAA,OAAAZ,EAAAa,MAAAC,KAAAC,YAAA,KAHvB,OAGNxB,EAHME,EAAAe,KAOZlC,EAASiB,GAPG,wBAAAE,EAAAkB,SAAAtB,MAAH,SAAA2B,GAAA,OAAAhC,EAAA6B,MAAAC,KAAAC,aAAA,IAAA/B,EAUX,OACEiC,EAAA9B,EAAA+B,cAACC,EAAA,EAAD,KACEF,EAAA9B,EAAA+B,cAAA,WACED,EAAA9B,EAAA+B,cAAA,QAAME,SAAU,SAAA9B,GAAC,OAAIV,EAAMU,KACzB2B,EAAA9B,EAAA+B,cAAA,SAAOG,KAAK,WAAWC,KAAK,KAAKC,MAAO/C,EAAIgD,SAAU,SAAAlC,GAAC,OAAIb,EAAMa,EAAEmC,cAAcF,UACjFN,EAAA9B,EAAA+B,cAAA,gCAGFnD,EAAMC,IAAI,SAAAkC,GAAI,OACde,EAAA9B,EAAA+B,cAAA,OAAKQ,IAAKxB,EAAKyB,IACbV,EAAA9B,EAAA+B,cAAA,UAAKhB,EAAKoB,KAAV,IAAgBL,EAAA9B,EAAA+B,cAAA,UAAQU,QAAS,kBA9BhB,SAAA1B,GACvB2B,YAAoB3B,EAAKO,OAAOzC,IAAI,SAAA8D,GAAI,OAnBzB,SAACA,GAClB,IAAMC,EAAOD,EAAKE,eAAeC,MAAM,KAAKC,MAE5C,WADkBJ,EAAKK,OAAZ,IAAsBL,EAAKM,MACtC,KAAqBN,EAAKO,IAA1B,MAAmCN,EAAnC,IAgB+CO,CAAWR,KAAQS,KAAK,OA6BxBC,CAAiBtC,KAAxC,qBACdA,EAAKuC,eAAe,UAChBvC,EAAKO,OAAOiC,OACZzB,EAAA9B,EAAA+B,cAAA,UACEhB,EAAKO,OAAOzC,IAAI,SAAA8D,GAAI,OAnEvB,SAACA,GACd,IAAMC,EAAOD,EAAKE,eAAeC,MAAM,KAAKC,MACtCE,EAAK,IAAON,EAAKK,OAAZ,IAAsBL,EAAKM,MACtC,OACEnB,EAAA9B,EAAA+B,cAAA,MAAIQ,IAAKI,EAAKH,IACZV,EAAA9B,EAAA+B,cAAA,KAAGyB,KAAMb,EAAKO,IAAKD,MAAOA,GAASA,GADrC,KACmDL,EADnD,IAEEd,EAAA9B,EAAA+B,cAAA,WACIY,EAAKc,OAAOF,QAAUZ,EAAKc,OAAO5E,IAAI,SAAA6E,GAAK,OAC3C5B,EAAA9B,EAAA+B,cAAA,QAAMQ,IAAKmB,EAAMlB,GAAImB,MAAQ,CAAEC,MAAO,OAAQC,gBAAe,IAAMH,EAAME,QAAcF,EAAMvB,UA4DrF2B,CAAOnB,MAGTb,EAAA9B,EAAA+B,cAAA,iBACFD,EAAA9B,EAAA+B,cAAA,gEC/Ed,IAAAgC,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAaeI,IAJA,SAAAtE,GAAA,IAAGuE,EAAHvE,EAAGuE,SAAH,OACbH,EAAAjE,EAAA+B,cAAA,YAAOqC","file":"component---src-pages-index-js-149ca60cffa38eb7c5b4.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\"\nimport * as clipboard from 'clipboard-polyfill'\nimport Octokit from '@octokit/rest'\n\nimport Layout from \"../components/layout\"\nimport { searchQueryContext } from '../lib/search-query'\n\nconst toHtml = (task) => {\n  const repo = task.repository_url.split('/').pop()\n  const title = `#${task.number} ${task.title}`\n  return (\n    <li key={task.id}>\n      <a href={task.url} title={title}>{ title }</a> [{repo}]\n      <div>\n        { task.labels.length && task.labels.map(label => (\n          <span key={label.id} style={ { color: '#fff', backgroundColor: `#${label.color}` } }>{ label.name }</span>\n        )) }\n      </div>\n    </li>\n  )\n}\n\nconst toMarkdown = (task) => {\n  const repo = task.repository_url.split('/').pop()\n  const title = `#${task.number} ${task.title}`\n  return `[${title}](${task.url}) [${repo}]`\n}\n\n\nconst IndexPage = () => {\n  const { state: initialSearchQueries } = useContext(searchQueryContext)\n  const searchQuery = initialSearchQueries.map(q => ({ ...q }))\n  const [state, setState] = useState(searchQuery)\n  const [gt, setGa] = useState('')\n  let octokit = null\n\n  useEffect(() => {\n    fetch()\n  }, [])\n\n  const onClickClipboard = data => {\n    clipboard.writeText(data.result.map(task => (toMarkdown(task))).join('\\n'))\n  }\n\n  const getGithubClient = (gt) => {\n    if (octokit) return octokit;\n    octokit = new Octokit({ auth: gt})\n    return octokit\n  }\n\n  const fetch = async e => {\n    if (e) e.preventDefault()\n    if (!gt) return;\n    const newState = await Promise.all(state.map(async data => {\n      const res = await getGithubClient(gt).search.issuesAndPullRequests({q: data.query})\n      return { ...data, result: res.data.items }\n    }))\n    setState(newState)\n  }\n\n  return (\n    <Layout>\n      <div>\n        <form onSubmit={e => fetch(e)}>\n          <input type=\"password\" name=\"gt\" value={gt} onChange={e => setGa(e.currentTarget.value)}/>\n          <button>fetch issues</button>\n        </form>\n      </div>\n      { state.map(data => (\n        <div key={data.id}>\n          <h2>{data.name} <button onClick={() => onClickClipboard(data)}>copy as markdown</button></h2>\n          { data.hasOwnProperty('result')\n            ? !!data.result.length\n              ? <ul>\n                { data.result.map(task => (\n                  toHtml(task)\n                )) }\n                </ul>\n              : <div>なし</div>\n            : <div>Loading...</div> }\n        </div>\n      )) }\n    </Layout>\n  )\n}\n\nexport default IndexPage\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\n\nconst Layout = ({ children }) => (\n  <main>{children}</main>\n)\n\nexport default Layout\n"],"sourceRoot":""}